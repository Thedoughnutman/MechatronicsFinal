'{$STAMP BS2}
'{$PBASIC 2.5}
' -----[ Code Title ]-----------------------------------------------------------------
' THE FINAL LAB --- Eric Pang Period 1 Reid
' -----[ Variables/Constants]---------------------------------------------------------
OUTPUT 11
  initLed VAR OUT11 'Port for initialization LED
TURNON CON 1 'Turn LED's on or off
TURNOFF CON 0
'---[END OF Initialization]-----------------------------------------------------------
x VAR Word 'Variable for duration of servo movements // bit nib byte word
c VAR Word
irDetector2 PIN 2
NEG_EDGE CON 0
startPulse VAR Word
pulse0 VAR Word
pulse1 VAR Word
pulse2 VAR Word
dataRemoteONE VAR byte
dataRemoteTWO VAR byte
timeToDischarge var Word
counter var Word
C7s CON 2218 ' ALSO D7b
D7  CON	2349
E7  CON	2637
F7s CON 2960 ' ALSO G7b
G7s CON 3322 ' ALSO A7b
A7  CON	3520
Be7 CON	3951 ' CANNOT SAY B7
spdt_switch VAR bit
' -----[ Main Routine ]---------------------------------------------------------------
'NOTE: PBASIC HAS A MAX OF 500 LINES AND 4 NESTED GOSUBS  'p5 = qti// p4= spdt// p3//  p2 = 2nd irDetector for ir REMOTE// 
Main:
  'GOSUB debukQTI
  'gosub turnRight !!!!battery at 7.99 volts!!!!! = 19
GOSUB init
GOSUB readRemote
 PAUSE 500 'to prevent the robot from moving forward while catching IR signals 
GOSUB back 'this is the QTI code STARt
  IF dataRemoteONE + 1 = 3  THEN 
    GOSUB pickup3
    ENDIF
  IF dataRemoteONE + 1 = 2  THEN 
    GOSUB pickup2
    ENDIF
  GOSUB FindStop
  GOSUB stopMove
  GOSUB NOKIA 'adds time to place ball
    IF dataRemoteONE + 1 = 3 AND dataRemoteTWO + 1 = 1 THEN   'goes into position and DUMPS after trash pickup
      GOSUB from3pos1
      ENDIF
    IF dataRemoteONE + 1 = 3 AND dataRemoteTWO + 1 = 2 THEN   
      GOSUB from3pos2
      ENDIF
    IF dataRemoteONE + 1 = 3 AND dataRemoteTWO + 1 = 3 THEN  
      GOSUB from3pos3 'dump on spot
      ENDIF
    IF dataRemoteONE + 1 = 3 AND dataRemoteTWO + 1 = 4 THEN   
      GOSUB from3pos4
      ENDIF
         IF dataRemoteONE + 1 = 2 AND dataRemoteTWO + 1 = 1 THEN   'goes into position and DUMPS after trash pickup
          GOSUB from2pos1
          ENDIF
        IF dataRemoteONE + 1 = 2 AND dataRemoteTWO + 1 = 2 THEN   
          GOSUB from2pos2 'dump on spot
          ENDIF
        IF dataRemoteONE + 1 = 2 AND dataRemoteTWO + 1 = 3 THEN  
          GOSUB from2pos3
          ENDIF
        IF dataRemoteONE + 1 = 2 AND dataRemoteTWO + 1 = 4 THEN   
          GOSUB from2pos4
          ENDIF
  GOSUB DUMPclock3 'dumps ball A full servo movement towards RIGHT completely 
      IF dataRemoteTWO + 1 = 1 THEN   'RETURN RETURN RETURN from dumping
      GOSUB back1
      ENDIF
    IF dataRemoteTWO + 1 = 2 THEN   
      GOSUB back2
      ENDIF
    IF dataRemoteTWO + 1 = 3 THEN  
      GOSUB back3
      ENDIF
    IF dataRemoteTWO + 1 = 4 THEN   
      GOSUB back4
      ENDIF  
  GOSUB TurnTiltR 'need to angle slightly to find the line back
  GOSUB moveQTI
  GOSUB back
            DO
              GOSUB lightt
            LOOP
' -----[ Sub Routines ]----------------------------------------------------------------
init: 'Initialization -- NOTE THE LED IS ON PORT 11
  GOSUB lightt
  FREQOUT 10, 1000, 2000
    INPUT 4
    GOSUB clock9 'back to startup position
    'GOSUB NOKIA 'soundcheck
RETURN
moveForward: 'A Fast Forward
  FOR x = 1 TO 5:
    PULSOUT 12, 850
    PULSOUT 13, 650
    PAUSE 20
  NEXT
RETURN
moveBackward: 'A Fast Backward
  FOR x = 1 TO 7:
    PULSOUT 12, 650
    PULSOUT 13, 850
    PAUSE 20
  NEXT
RETURN
turnLeft: 'Tank Turn Version
  FOR x = 1 TO 19:
    PULSOUT 12, 650 
    PULSOUT 13, 650 
    PAUSE 20
  NEXT
RETURN
turnRight: 'Tank Turn Version
  FOR x = 1 TO 19:
    PULSOUT 12, 850 
    PULSOUT 13, 850 
    PAUSE 20
  NEXT
RETURN
stopMove: 'Stops ALL Movement 
  FOR x = 1 TO 20:
    PULSOUT 12, 850 
    PULSOUT 13, 650 
    PAUSE 20
  NEXT
RETURN
readRemote:
 DO
    PULSIN irDetector2, NEG_EDGE, startPulse
    PULSIN irDetector2, NEG_EDGE, pulse0
    PULSIN irDetector2, NEG_EDGE, pulse1
    PULSIN irDetector2, NEG_EDGE, pulse2
  LOOP UNTIL (startPulse >= 1000)
    dataRemoteONE.BIT0 = pulse0.BIT9
    dataRemoteONE.BIT1 = pulse1.BIT9
    dataRemoteONE.BIT2 = pulse2.BIT9
PAUSE 500 'Wont capture the same IR mesage twice
GOSUB lightt ' lights up startup light once
  DO
    PULSIN irDetector2, NEG_EDGE, startPulse
    PULSIN irDetector2, NEG_EDGE, pulse0
    PULSIN irDetector2, NEG_EDGE, pulse1
    PULSIN irDetector2, NEG_EDGE, pulse2
  LOOP UNTIL (startPulse >= 1000)
    dataRemoteTWO.BIT0 = pulse0.BIT9
    dataRemoteTWO.BIT1 = pulse1.BIT9
    dataRemoteTWO.BIT2 = pulse2.BIT9
    PAUSE 500
    GOSUB lightt ' lights up startup light twice
    GOSUB lightt
      FREQOUT 10, 500, 3542 ' speaker sound
      return
FindLeft: 'Goes forward BUT ONCE there is a wall then turnLeft
  DO 
  PULSOUT 12, 850
  PULSOUT 13, 650
 spdt_switch = in4
LOOP WHILE spdt_switch = 0
    GOSUB moveBackward
    pause 100
    GOSUB turnLeft
    RETURN
FindRight:
  DO 
  PULSOUT 12, 850
  PULSOUT 13, 650
 spdt_switch = in4
LOOP WHILE spdt_switch = 0
    GOSUB moveBackward
    pause 100
    GOSUB turnRight 
    RETURN
FindStop:
  DO 
  PULSOUT 12, 850
  PULSOUT 13, 650
 spdt_switch = in4
LOOP WHILE spdt_switch = 0
    gosub moveBackward
    pause 100
    RETURN
TurnAroundR:
  GOSUB turnRight
  GOSUB turnRight
  RETURN
TurnTiltR: 'need to angle slightly to find the line back
  FOR x = 1 TO 2: 'from gosub turnRight
    PULSOUT 12, 850 
    PULSOUT 13, 850 
    PAUSE 20
  NEXT
RETURN
moveQTI:
DO
   PULSOUT 12, 850
   PULSOUT 13, 650
     PAUSE 20
   HIGH 5
     PAUSE 3
   RCTIME 5, 1, timeToDischarge  
  LOOP UNTIL timeToDischarge <= 220 'the white tape
RETURN
pickup2:
  GOSUB FindLeft
  GOSUB FindRight
  RETURN
pickup3:
  GOSUB FindRight
  GOSUB FindLeft
  RETURN
from3pos1: 'also include dumping DUMPclock3 BY FACING FORWARD
  GOSUB TurnAroundR
  GOSUB FindRight
  GOSUB FindStop 'have a DUMPclock3 on the main program n`eed this for the chance that it is a 3 / 3
  RETURN
from3pos2:
  GOSUB TurnAroundR
  GOSUB FindRight
  GOSUB FindRight
  GOSUB FindStop
  RETURN
from3pos3: ' stays in place and dumps
  RETURN
from3pos4:
  GOSUB TurnAroundR
  GOSUB FindLeft 
  RETURN
from2pos1: 'also include dumping DUMPclock3 BY FACING FORWARD
  GOSUB TurnAroundR
  GOSUB FindRight
  RETURN
from2pos2:
  RETURN
from2pos3:
  GOSUB TurnAroundR
  GOSUB FindLeft
  GOSUB FindLeft
  GOSUB FindStop
  RETURN
from2pos4:
  GOSUB TurnAroundR
  GOSUB FindLeft
  GOSUB FindStop
  RETURN
back1: 'GOES backfrom POSITION and into the entrance of the maze ADD the turn so it makes to at least the white line
  GOSUB TurnAroundR
  RETURN
back2:
  GOSUB TurnAroundR
  GOSUB FindLeft
  RETURN
back3:
  GOSUB TurnAroundR
  GOSUB FindRight
  RETURN
back4:
  GOSUB TurnAroundR
  RETURN
clock9: 'farthest left
 FOR c = 1 to 30
  PULSOUT 15, 1250
  PAUSE 20
 NEXT
RETURN
DUMPclock3: 'farthest right
 FOR c = 1 to 60 ' max 65535
  PULSOUT 15, 250
  PAUSE 20
 NEXT
RETURN
debukQTI: 
  DO 
   HIGH 5
   RCTIME 5, 1, timeToDischarge
   DEBUG ? timeToDischarge
   PAUSE 100
 LOOP
turnLeftQTI: 'Tank turn versions
  counter = counter + 1
    PULSOUT 12, 650
    PULSOUT 13, 650
    PAUSE 20
  RETURN
turnRightQTI:
  counter = counter + 1
    PULSOUT 12, 850
    PULSOUT 13, 850
    PAUSE 20
  RETURN
NOKIA: 'SONG
FREQOUT 10, 200, E7 'ED F# G# C#B D E BA C# E A
  PAUSE 50
FREQOUT 10, 200, D7
  PAUSE 50
FREQOUT 10, 400, F7s
  PAUSE 50
FREQOUT 10, 400, G7s
  PAUSE 50
FREQOUT 10, 200, C7s
  PAUSE 50
FREQOUT 10, 200, Be7
  PAUSE 50
FREQOUT 10, 400, D7
  PAUSE 50
FREQOUT 10, 400, E7
  PAUSE 50
FREQOUT 10, 200, Be7
  PAUSE 50
FREQOUT 10, 200, A7
  PAUSE 50
FREQOUT 10, 400, C7s
  PAUSE 50
FREQOUT 10, 400, E7
  PAUSE 50
FREQOUT 10, 600, A7
  PAUSE 50
RETURN
back:
DO
   PULSOUT 12, 850
   PULSOUT 13, 650
  spdt_switch = in4
     PAUSE 20
   HIGH 5
     PAUSE 3
   RCTIME 5, 1, timeToDischarge  
   IF (timeToDischarge <= 220) then '520
     PAUSE 10 '20
     GOSUB turnLeftQTI 'Left
   elseIF (timeToDischarge >= 600) then '900   
     PAUSE 10
     GOSUB turnLeftQTI 'Prevents a spinout
   elseIF (timeToDischarge >= 300) then '600
     PAUSE 10
     GOSUB turnRightQTI 'Right 
   ENDIF
  LOOP UNTIL spdt_switch =  1
  GOSUB moveBackward
  pause 100
  return
lightt:
     initLED = TURNON 'Blinks the LED on
        PAUSE 100
      initLed = TURNOFF
        PAUSE 100
        return
